name: Build and Test

on:
  push:
    branches:
      - '*'
  pull_request:
  schedule:
    - cron: "5 4 * */1 *"

jobs:
  build_image:
    strategy:
      fail-fast: true
      matrix:
        php: ["latest", "5.6", "7.0", "7.1", "7.2", "7.3", "7.4"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Build Image
        run: |
          docker build -f ${{ matrix.php }}/Dockerfile -t robbrazier/php:${{ matrix.php }} .
          docker images
          docker save robbrazier/php:${{ matrix.php }} > php-${{ matrix.php }}.tar

      - name: Upload Image
        uses: actions/upload-artifact@v3
        with:
          name: php-${{ matrix.php }}
          path: php-${{ matrix.php }}.tar

  publish_image:
    needs: build_image
    if: github.repository == 'RobBrazier/docker-php-composer' && (github.ref_name == 'master')
    strategy:
      fail-fast: true
      matrix:
        php: [ "latest", "5.6", "7.0", "7.1", "7.2", "7.3", "7.4" ]
    runs-on: ubuntu-latest
    steps:
      - name: Set Image Name
        run: echo "IMAGE_NAME=robbrazier/php" >> $GITHUB_ENV

      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Download Image
        uses: actions/download-artifact@v3
        with:
          name: php-${{ matrix.php }}

      - name: Load Image
        run: docker load -i php-${{ matrix.php }}.tar

      - name: Get Full PHP Version
        id: full_php_version
        run: |
          docker run $IMAGE_NAME:${{ matrix.php }} --version | egrep 'PHP [0-9\.]+' | awk -F' ' '{ print $2 }'
          full_version="$(docker run $IMAGE_NAME:${{ matrix.php }} --version | egrep 'PHP [0-9\.]+' | awk -F' ' '{ print $2 }')"
          echo $full_version
          echo ::set-output name=version::$full_version

      - name: Is image up-to-date
        id: image_status
        run: |
          if curl --silent -f -lSL https://index.docker.io/v1/repositories/$IMAGE_NAME/tags/${{ steps.full_php_version.outputs.version }} > /dev/null; then
            echo ::set-output name=up_to_date::true
          else
            echo ::set-output name=up_to_date::false
          fi

      - name: Push Image
        if: steps.image_status.outputs.up_to_date == 'false'
        run: |
          if ! [[ "${{ matrix.php }}" == "latest" ]]; then
              echo docker push "$IMAGE_NAME:${{ steps.full_php_version.outputs.version }}"
          fi
          echo docker push "$IMAGE_NAME:${{ matrix.php }}"